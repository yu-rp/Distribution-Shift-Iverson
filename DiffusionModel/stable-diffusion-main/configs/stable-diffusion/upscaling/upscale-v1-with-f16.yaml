model:
  base_learning_rate: 5.0e-05
  target: ldm.models.diffusion.ddpm.LatentUpscaleDiffusion
  params:
    low_scale_key: "lr"
    linear_start: 0.001
    linear_end: 0.015
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: "jpg"
    cond_stage_key: "txt"
    image_size: 32
    channels: 16
    cond_stage_trainable: false
    conditioning_key: "hybrid-adm"
    monitor: val/loss_simple_ema
    scale_factor: 0.22765929   # magic number

    low_scale_config:
      target: ldm.modules.encoders.modules.LowScaleEncoder
      params:
        scale_factor: 0.18215
        linear_start: 0.00085
        linear_end: 0.0120
        timesteps: 1000
        max_noise_level: 250
        output_size: null
        model_config:
          target: ldm.models.autoencoder.AutoencoderKL
          params:
            embed_dim: 4
            monitor: val/rec_loss
            ckpt_path: "/fsx/stable-diffusion/stable-diffusion/models/first_stage_models/kl-f8/model.ckpt"
            ddconfig:
              double_z: true
              z_channels: 4
              resolution: 256
              in_channels: 3
              out_ch: 3
              ch: 128
              ch_mult:
                - 1
                - 2
                - 4
                - 4
              num_res_blocks: 2
              attn_resolutions: [ ]
              dropout: 0.0
            lossconfig:
              target: torch.nn.Identity

    scheduler_config: # 10000 warmup steps
      target: ldm.lr_scheduler.LambdaLinearScheduler
      params:
        warm_up_steps: [ 10000 ]
        cycle_lengths: [ 10000000000000 ] # incredibly large number to prevent corner cases
        f_start: [ 1.e-6 ]
        f_max: [ 1. ]
        f_min: [ 1. ]

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        num_classes: 251  #  timesteps for noise conditoining
        image_size: 64    # not really needed
        in_channels: 20
        out_channels: 16
        model_channels: 128
        attention_resolutions: [ 8, 4, 2 ] # -> at 32, 16, 8
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 6, 8 ]
        # -> res, ds: (64, 1), (32, 2), (16, 4), (6, 8), (4, 16)
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False

    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 16
        monitor: val/rec_loss
        ckpt_path: "/fsx/stable-diffusion/stable-diffusion/models/first_stage_models/kl-f16/model.ckpt"
        ddconfig:
          double_z: True
          z_channels: 16
          resolution: 256
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult: [ 1,1,2,2,4 ]  # num_down = len(ch_mult)-1
          num_res_blocks: 2
          attn_resolutions: [ 16 ]
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder


#data:   # TODO: finetune here later
#  target: ldm.data.laion.WebDataModuleFromConfig
#  params:
#    tar_base: "pipe:aws s3 cp s3://s-datasets/laion-high-resolution/"
#    batch_size: 10
#    num_workers: 4
#    train:
#      shards: '{00000..17279}.tar -'
#      shuffle: 10000
#      image_key: jpg
#      image_transforms:
#      - target: torchvision.transforms.Resize
#        params:
#          size: 1024
#          interpolation: 3
#      - target: torchvision.transforms.RandomCrop
#        params:
#          size: 1024
#      postprocess:
#              target: ldm.data.laion.AddLR
#              params:
#                factor: 2
#
#    # NOTE use enough shards to avoid empty validation loops in workers
#    validation:
#      shards: '{17280..17535}.tar -'
#      shuffle: 0
#      image_key: jpg
#      image_transforms:
#      - target: torchvision.transforms.Resize
#        params:
#          size: 1024
#          interpolation: 3
#      - target: torchvision.transforms.CenterCrop
#        params:
#          size: 1024
#      postprocess:
#              target: ldm.data.laion.AddLR
#              params:
#                factor: 2

data:
  target: ldm.data.laion.WebDataModuleFromConfig
  params:
    tar_base: "__improvedaesthetic__"
    batch_size: 28
    num_workers: 4
    multinode: True
    min_size: 512
    train:
      shards: '{00000..17279}.tar -'
      shuffle: 10000
      image_key: jpg
      image_transforms:
      - target: torchvision.transforms.Resize
        params:
          size: 512
          interpolation: 3
      - target: torchvision.transforms.RandomCrop
        params:
          size: 512
      postprocess:
        target: ldm.data.laion.AddLR
        params:
          factor: 2

    # NOTE use enough shards to avoid empty validation loops in workers
    validation:
      shards: '{17280..17535}.tar -'
      shuffle: 0
      image_key: jpg
      image_transforms:
      - target: torchvision.transforms.Resize
        params:
          size: 512
          interpolation: 3
      - target: torchvision.transforms.CenterCrop
        params:
          size: 512
      postprocess:
        target: ldm.data.laion.AddLR
        params:
          factor: 2


lightning:
  find_unused_parameters: False

  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 1000
        max_images: 4
        increase_log_steps: False
        log_first_step: False
        log_images_kwargs:
          use_ema_scope: False
          inpaint: False
          plot_progressive_rows: False
          plot_diffusion_rows: False
          N: 4
          unconditional_guidance_scale: 3.0
          unconditional_guidance_label: [""]

  trainer:
    benchmark: True
    val_check_interval: 5000000  # really sorry
    num_sanity_val_steps: 0
    accumulate_grad_batches: 2
